2024-04-19 11:22:20 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The class `langchain_community.llms.huggingface_hub.HuggingFaceHub` was deprecated in langchain-community 0.0.21 and will be removed in 0.2.0. Use HuggingFaceEndpoint instead.
2024-04-19 11:22:20 | ERROR | stderr |   warn_deprecated(
2024-04-19 11:22:21 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 11:22:21 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/huggingface_hub/utils/_errors.py", line 304, in hf_raise_for_status
2024-04-19 11:22:21 | ERROR | stderr |     response.raise_for_status()
2024-04-19 11:22:21 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/requests/models.py", line 1021, in raise_for_status
2024-04-19 11:22:21 | ERROR | stderr |     raise HTTPError(http_error_msg, response=self)
2024-04-19 11:22:21 | ERROR | stderr | requests.exceptions.HTTPError: 403 Client Error: Forbidden for url: https://huggingface.co/api/models/mistralai/Mixtral-8x7B-Instruct-v0.1
2024-04-19 11:22:21 | ERROR | stderr | 
2024-04-19 11:22:21 | ERROR | stderr | The above exception was the direct cause of the following exception:
2024-04-19 11:22:21 | ERROR | stderr | 
2024-04-19 11:22:21 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 11:22:21 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 547, in <module>
2024-04-19 11:22:21 | ERROR | stderr |     agent.task_execution(default_conversation)
2024-04-19 11:22:21 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 486, in task_execution
2024-04-19 11:22:21 | ERROR | stderr |     temp = self.task_decompose(question=question, Tool_dic=state.tool_dic)
2024-04-19 11:22:21 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 109, in task_decompose
2024-04-19 11:22:21 | ERROR | stderr |     chat = HuggingFaceHub(repo_id=self.model_path, huggingfacehub_api_token="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")      # "google/gemma-7b", "mistralai/Mixtral-8x7B-Instruct-v0.1"
2024-04-19 11:22:21 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py", line 180, in warn_if_direct_instance
2024-04-19 11:22:21 | ERROR | stderr |     return wrapped(self, *args, **kwargs)
2024-04-19 11:22:21 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/load/serializable.py", line 120, in __init__
2024-04-19 11:22:21 | ERROR | stderr |     super().__init__(**kwargs)
2024-04-19 11:22:21 | ERROR | stderr |   File "pydantic/main.py", line 339, in pydantic.main.BaseModel.__init__
2024-04-19 11:22:21 | ERROR | stderr |   File "pydantic/main.py", line 1100, in pydantic.main.validate_model
2024-04-19 11:22:21 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_community/llms/huggingface_hub.py", line 80, in validate_environment
2024-04-19 11:22:21 | ERROR | stderr |     model_info = HfApi(token=huggingfacehub_api_token).model_info(
2024-04-19 11:22:21 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/huggingface_hub/utils/_validators.py", line 119, in _inner_fn
2024-04-19 11:22:21 | ERROR | stderr |     return fn(*args, **kwargs)
2024-04-19 11:22:21 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/huggingface_hub/hf_api.py", line 2228, in model_info
2024-04-19 11:22:21 | ERROR | stderr |     hf_raise_for_status(r)
2024-04-19 11:22:21 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/huggingface_hub/utils/_errors.py", line 321, in hf_raise_for_status
2024-04-19 11:22:21 | ERROR | stderr |     raise GatedRepoError(message, response) from e
2024-04-19 11:22:21 | ERROR | stderr | huggingface_hub.utils._errors.GatedRepoError: 403 Client Error. (Request ID: Root=1-6621f17d-6c37b36e2ec826507cff3f96;e36d3af6-37df-4516-b751-321aeb21929d)
2024-04-19 11:22:21 | ERROR | stderr | 
2024-04-19 11:22:21 | ERROR | stderr | Cannot access gated repo for url https://huggingface.co/api/models/mistralai/Mixtral-8x7B-Instruct-v0.1.
2024-04-19 11:22:21 | ERROR | stderr | Access to model mistralai/Mixtral-8x7B-Instruct-v0.1 is restricted and you are not in the authorized list. Visit https://huggingface.co/mistralai/Mixtral-8x7B-Instruct-v0.1 to ask for access.
2024-04-19 11:23:08 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The class `langchain_community.llms.huggingface_hub.HuggingFaceHub` was deprecated in langchain-community 0.0.21 and will be removed in 0.2.0. Use HuggingFaceEndpoint instead.
2024-04-19 11:23:08 | ERROR | stderr |   warn_deprecated(
2024-04-19 11:23:09 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 11:23:09 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/huggingface_hub/utils/_errors.py", line 304, in hf_raise_for_status
2024-04-19 11:23:09 | ERROR | stderr |     response.raise_for_status()
2024-04-19 11:23:09 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/requests/models.py", line 1021, in raise_for_status
2024-04-19 11:23:09 | ERROR | stderr |     raise HTTPError(http_error_msg, response=self)
2024-04-19 11:23:09 | ERROR | stderr | requests.exceptions.HTTPError: 403 Client Error: Forbidden for url: https://huggingface.co/api/models/mistralai/Mixtral-8x7B-Instruct-v0.1
2024-04-19 11:23:09 | ERROR | stderr | 
2024-04-19 11:23:09 | ERROR | stderr | The above exception was the direct cause of the following exception:
2024-04-19 11:23:09 | ERROR | stderr | 
2024-04-19 11:23:09 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 11:23:09 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 547, in <module>
2024-04-19 11:23:09 | ERROR | stderr |     agent.task_execution(default_conversation)
2024-04-19 11:23:09 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 486, in task_execution
2024-04-19 11:23:09 | ERROR | stderr |     temp = self.task_decompose(question=question, Tool_dic=state.tool_dic)
2024-04-19 11:23:09 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 109, in task_decompose
2024-04-19 11:23:09 | ERROR | stderr |     chat = HuggingFaceHub(repo_id=self.model_path, huggingfacehub_api_token="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")      # "google/gemma-7b", "mistralai/Mixtral-8x7B-Instruct-v0.1"
2024-04-19 11:23:09 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py", line 180, in warn_if_direct_instance
2024-04-19 11:23:09 | ERROR | stderr |     return wrapped(self, *args, **kwargs)
2024-04-19 11:23:09 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/load/serializable.py", line 120, in __init__
2024-04-19 11:23:09 | ERROR | stderr |     super().__init__(**kwargs)
2024-04-19 11:23:09 | ERROR | stderr |   File "pydantic/main.py", line 339, in pydantic.main.BaseModel.__init__
2024-04-19 11:23:09 | ERROR | stderr |   File "pydantic/main.py", line 1100, in pydantic.main.validate_model
2024-04-19 11:23:09 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_community/llms/huggingface_hub.py", line 80, in validate_environment
2024-04-19 11:23:09 | ERROR | stderr |     model_info = HfApi(token=huggingfacehub_api_token).model_info(
2024-04-19 11:23:09 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/huggingface_hub/utils/_validators.py", line 119, in _inner_fn
2024-04-19 11:23:09 | ERROR | stderr |     return fn(*args, **kwargs)
2024-04-19 11:23:09 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/huggingface_hub/hf_api.py", line 2228, in model_info
2024-04-19 11:23:09 | ERROR | stderr |     hf_raise_for_status(r)
2024-04-19 11:23:09 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/huggingface_hub/utils/_errors.py", line 321, in hf_raise_for_status
2024-04-19 11:23:09 | ERROR | stderr |     raise GatedRepoError(message, response) from e
2024-04-19 11:23:09 | ERROR | stderr | huggingface_hub.utils._errors.GatedRepoError: 403 Client Error. (Request ID: Root=1-6621f1ad-7c8c4e86094aa3632b843729;4f45d637-3e78-41f8-b99e-9df1922962a8)
2024-04-19 11:23:09 | ERROR | stderr | 
2024-04-19 11:23:09 | ERROR | stderr | Cannot access gated repo for url https://huggingface.co/api/models/mistralai/Mixtral-8x7B-Instruct-v0.1.
2024-04-19 11:23:09 | ERROR | stderr | Access to model mistralai/Mixtral-8x7B-Instruct-v0.1 is restricted and you are not in the authorized list. Visit https://huggingface.co/mistralai/Mixtral-8x7B-Instruct-v0.1 to ask for access.
2024-04-19 11:27:38 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The class `langchain_community.llms.huggingface_hub.HuggingFaceHub` was deprecated in langchain-community 0.0.21 and will be removed in 0.2.0. Use HuggingFaceEndpoint instead.
2024-04-19 11:27:38 | ERROR | stderr |   warn_deprecated(
2024-04-19 11:27:39 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The function `run` was deprecated in LangChain 0.1.0 and will be removed in 0.2.0. Use invoke instead.
2024-04-19 11:27:39 | ERROR | stderr |   warn_deprecated(
2024-04-19 11:27:44 | INFO | stdout | task decompose fails: list index out of range
2024-04-19 11:27:45 | INFO | stdout | task decompose fails: list index out of range
2024-04-19 11:27:45 | INFO | stdout | task decompose fails: list index out of range
2024-04-19 11:27:45 | INFO | stdout | task decompose fails: list index out of range
2024-04-19 11:27:45 | INFO | stdout | task decompose fails: list index out of range
2024-04-19 11:27:46 | INFO | stdout | task decompose fails: list index out of range
2024-04-19 11:27:46 | INFO | stdout | task decompose fails: list index out of range
2024-04-19 11:27:46 | INFO | stdout | task decompose fails: list index out of range
2024-04-19 11:27:46 | INFO | stdout | task decompose fails: list index out of range
2024-04-19 11:27:47 | INFO | stdout | task decompose fails: list index out of range
2024-04-19 11:27:47 | INFO | stdout | task decompose fails: list index out of range
2024-04-19 11:27:47 | INFO | stdout | task decompose fails: list index out of range
2024-04-19 11:27:47 | INFO | stdout | -1
2024-04-19 11:27:47 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 11:27:47 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 547, in <module>
2024-04-19 11:27:47 | ERROR | stderr |     agent.task_execution(default_conversation)
2024-04-19 11:27:47 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 489, in task_execution
2024-04-19 11:27:47 | ERROR | stderr |     for t in range(len(temp)):
2024-04-19 11:27:47 | ERROR | stderr | TypeError: object of type 'int' has no len()
2024-04-19 11:29:17 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The class `langchain_community.llms.huggingface_hub.HuggingFaceHub` was deprecated in langchain-community 0.0.21 and will be removed in 0.2.0. Use HuggingFaceEndpoint instead.
2024-04-19 11:29:17 | ERROR | stderr |   warn_deprecated(
2024-04-19 11:29:18 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The function `run` was deprecated in LangChain 0.1.0 and will be removed in 0.2.0. Use invoke instead.
2024-04-19 11:29:18 | ERROR | stderr |   warn_deprecated(
2024-04-19 11:29:18 | INFO | stdout | System: You are a helpful assistant.
2024-04-19 11:29:18 | INFO | stdout | Human: You need to decompose a complex user's question into some simple subtasks and let the model execute it step by step.
2024-04-19 11:29:18 | INFO | stdout | This is the user's question: identify the person in this image
2024-04-19 11:29:18 | INFO | stdout | This is tool list:
2024-04-19 11:29:18 | INFO | stdout | [{'ID': 0, 'description': "'add_' returns the sum of all the arguments passed to it, normalized to 2 decimal places."}, {'ID': 1, 'description': "'subtract_' returns the difference of the arguments passed to it, starting with the first argument and subtracting all subsequent arguments, normalized to 2 decimal places."}, {'ID': 2, 'description': "'multiply_' returns the product of all the arguments passed to it, normalized to 2 decimal places."}, {'ID': 3, 'description': "'divide_' returns the quotient of the first argument divided by all the subsequent arguments, normalized to 2 decimal places."}, {'ID': 4, 'description': "'power_' returns the result of raising the first argument to the power of all the subsequent arguments, normalized to 2 decimal places."}, {'ID': 5, 'description': "'sqrt_' returns the square root of the first argument, normalized to 2 decimal places."}, {'ID': 6, 'description': "'log_' returns the base-10 logarithm of the first argument if one argument is provided, or the logarithm with base as the second argument if two arguments are provided, normalized to 2 decimal places."}, {'ID': 7, 'description': "'ln_' returns the natural logarithm of the first argument, normalized to 2 decimal places."}, {'ID': 8, 'description': "'lcm_' returns the least common multiple of all the arguments passed to it, normalized to 2 decimal places."}, {'ID': 9, 'description': "'gcd_' returns the greatest common divisor of all the arguments passed to it, normalized to 2 decimal places."}, {'ID': 10, 'description': "'remainder_' returns the remainder of the division of the first argument by the second argument, normalized to 2 decimal places."}, {'ID': 11, 'description': "'choose_' returns the number of ways to choose 'r' items from 'n' options without regard to order, normalized to 2 decimal places."}, {'ID': 12, 'description': "'permutate_' returns the number of ways to arrange 'r' items out of 'n' options, normalized to 2 decimal places."}]
2024-04-19 11:29:18 | INFO | stdout | Please note that:
2024-04-19 11:29:18 | INFO | stdout | 1. You should only decompose this complex user's question into some simple subtasks which can be executed easily by using one single tool in the tool list.
2024-04-19 11:29:18 | INFO | stdout | 2. If one subtask need the results from other subtask, you can should write clearly. For example:{"Tasks": ["Convert 23 km/h to X km/min by 'divide_'", "Multiply X km/min by 45 min to get Y by 'multiply_'"]}
2024-04-19 11:29:18 | INFO | stdout | 3. You must ONLY output in a parsible JSON format. An example output looks like:
2024-04-19 11:29:18 | INFO | stdout | '''
2024-04-19 11:29:18 | INFO | stdout | {"Tasks": [string 1, string 2, ...]}
2024-04-19 11:29:18 | INFO | stdout | '''
2024-04-19 11:29:18 | INFO | stdout | Output:
2024-04-19 11:29:18 | INFO | stdout | 
2024-04-19 11:29:18 | INFO | stdout | ```
2024-04-19 11:29:18 | INFO | stdout | {
2024-04-19 11:29:18 | INFO | stdout |   "Tasks": [
2024-04-19 11:29:18 | INFO | stdout |     "Use 'identify_' tool to identify the person in the image"
2024-04-19 11:29:18 | INFO | stdout |   ]
2024-04-19 11:29:18 | INFO | stdout | }
2024-04-19 11:29:18 | INFO | stdout | ```
2024-04-19 11:29:18 | INFO | stdout | 
2024-04-19 11:29:18 | INFO | stdout | I'm sorry, but there seems to be a misunderstanding. The tools you've provided are mathematical functions, and they can't be used to identify a person in an image. The 'identify_' tool you mentioned doesn't exist in the provided list. I would recommend using an
2024-04-19 11:31:45 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The class `langchain_community.llms.huggingface_hub.HuggingFaceHub` was deprecated in langchain-community 0.0.21 and will be removed in 0.2.0. Use HuggingFaceEndpoint instead.
2024-04-19 11:31:45 | ERROR | stderr |   warn_deprecated(
2024-04-19 11:31:46 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The function `run` was deprecated in LangChain 0.1.0 and will be removed in 0.2.0. Use invoke instead.
2024-04-19 11:31:46 | ERROR | stderr |   warn_deprecated(
2024-04-19 11:31:50 | INFO | stdout | System: You are a helpful assistant.
2024-04-19 11:31:50 | INFO | stdout | Human: You need to decompose a complex user's question into some simple subtasks and let the model execute it step by step.
2024-04-19 11:31:50 | INFO | stdout | This is the user's question: identify the person in this image
2024-04-19 11:31:50 | INFO | stdout | This is tool list:
2024-04-19 11:31:50 | INFO | stdout | [{'ID': 0, 'description': "'add_' returns the sum of all the arguments passed to it, normalized to 2 decimal places."}, {'ID': 1, 'description': "'subtract_' returns the difference of the arguments passed to it, starting with the first argument and subtracting all subsequent arguments, normalized to 2 decimal places."}, {'ID': 2, 'description': "'multiply_' returns the product of all the arguments passed to it, normalized to 2 decimal places."}, {'ID': 3, 'description': "'divide_' returns the quotient of the first argument divided by all the subsequent arguments, normalized to 2 decimal places."}, {'ID': 4, 'description': "'power_' returns the result of raising the first argument to the power of all the subsequent arguments, normalized to 2 decimal places."}, {'ID': 5, 'description': "'sqrt_' returns the square root of the first argument, normalized to 2 decimal places."}, {'ID': 6, 'description': "'log_' returns the base-10 logarithm of the first argument if one argument is provided, or the logarithm with base as the second argument if two arguments are provided, normalized to 2 decimal places."}, {'ID': 7, 'description': "'ln_' returns the natural logarithm of the first argument, normalized to 2 decimal places."}, {'ID': 8, 'description': "'lcm_' returns the least common multiple of all the arguments passed to it, normalized to 2 decimal places."}, {'ID': 9, 'description': "'gcd_' returns the greatest common divisor of all the arguments passed to it, normalized to 2 decimal places."}, {'ID': 10, 'description': "'remainder_' returns the remainder of the division of the first argument by the second argument, normalized to 2 decimal places."}, {'ID': 11, 'description': "'choose_' returns the number of ways to choose 'r' items from 'n' options without regard to order, normalized to 2 decimal places."}, {'ID': 12, 'description': "'permutate_' returns the number of ways to arrange 'r' items out of 'n' options, normalized to 2 decimal places."}, {'ID': 13, 'description': "'http://192.168.6.161:4444/api/searchUser' returns the information of a person from a face image using for face recognition system"}]
2024-04-19 11:31:50 | INFO | stdout | Please note that:
2024-04-19 11:31:50 | INFO | stdout | 1. You should only decompose this complex user's question into some simple subtasks which can be executed easily by using one single tool in the tool list.
2024-04-19 11:31:50 | INFO | stdout | 2. If one subtask need the results from other subtask, you can should write clearly. For example:{"Tasks": ["Convert 23 km/h to X km/min by 'divide_'", "Multiply X km/min by 45 min to get Y by 'multiply_'"]}
2024-04-19 11:31:50 | INFO | stdout | 3. You must ONLY output in a parsible JSON format. An example output looks like:
2024-04-19 11:31:50 | INFO | stdout | '''
2024-04-19 11:31:50 | INFO | stdout | {"Tasks": [string 1, string 2, ...]}
2024-04-19 11:31:50 | INFO | stdout | '''
2024-04-19 11:31:50 | INFO | stdout | Output:
2024-04-19 11:31:50 | INFO | stdout | 
2024-04-19 11:31:50 | INFO | stdout | ```json
2024-04-19 11:31:50 | INFO | stdout | {
2024-04-19 11:31:50 | INFO | stdout |   "Tasks": [
2024-04-19 11:31:50 | INFO | stdout |     "Use tool with ID 13 to get user information from the image"
2024-04-19 11:31:50 | INFO | stdout |   ]
2024-04-19 11:31:50 | INFO | stdout | }
2024-04-19 11:31:50 | INFO | stdout | ```
2024-04-19 11:35:41 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The class `langchain_community.llms.huggingface_hub.HuggingFaceHub` was deprecated in langchain-community 0.0.21 and will be removed in 0.2.0. Use HuggingFaceEndpoint instead.
2024-04-19 11:35:41 | ERROR | stderr |   warn_deprecated(
2024-04-19 11:35:42 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The function `run` was deprecated in LangChain 0.1.0 and will be removed in 0.2.0. Use invoke instead.
2024-04-19 11:35:42 | ERROR | stderr |   warn_deprecated(
2024-04-19 11:35:43 | INFO | stdout | System: You are a helpful assistant.
2024-04-19 11:35:43 | INFO | stdout | Human: You need to decompose a complex user's question into some simple subtasks and let the model execute it step by step.
2024-04-19 11:35:43 | INFO | stdout | This is the user's question: identify the person in this image
2024-04-19 11:35:43 | INFO | stdout | This is tool list:
2024-04-19 11:35:43 | INFO | stdout | [{'ID': 0, 'description': "'add_' returns the sum of all the arguments passed to it, normalized to 2 decimal places."}, {'ID': 1, 'description': "'subtract_' returns the difference of the arguments passed to it, starting with the first argument and subtracting all subsequent arguments, normalized to 2 decimal places."}, {'ID': 2, 'description': "'multiply_' returns the product of all the arguments passed to it, normalized to 2 decimal places."}, {'ID': 3, 'description': "'divide_' returns the quotient of the first argument divided by all the subsequent arguments, normalized to 2 decimal places."}, {'ID': 4, 'description': "'power_' returns the result of raising the first argument to the power of all the subsequent arguments, normalized to 2 decimal places."}, {'ID': 5, 'description': "'sqrt_' returns the square root of the first argument, normalized to 2 decimal places."}, {'ID': 6, 'description': "'log_' returns the base-10 logarithm of the first argument if one argument is provided, or the logarithm with base as the second argument if two arguments are provided, normalized to 2 decimal places."}, {'ID': 7, 'description': "'ln_' returns the natural logarithm of the first argument, normalized to 2 decimal places."}, {'ID': 8, 'description': "'lcm_' returns the least common multiple of all the arguments passed to it, normalized to 2 decimal places."}, {'ID': 9, 'description': "'gcd_' returns the greatest common divisor of all the arguments passed to it, normalized to 2 decimal places."}, {'ID': 10, 'description': "'remainder_' returns the remainder of the division of the first argument by the second argument, normalized to 2 decimal places."}, {'ID': 11, 'description': "'choose_' returns the number of ways to choose 'r' items from 'n' options without regard to order, normalized to 2 decimal places."}, {'ID': 12, 'description': "'permutate_' returns the number of ways to arrange 'r' items out of 'n' options, normalized to 2 decimal places."}, {'ID': 13, 'description': "'http://192.168.6.161:4444/api/searchUser' returns the information of a person from a face image using for face recognition system"}]
2024-04-19 11:35:43 | INFO | stdout | Please note that:
2024-04-19 11:35:43 | INFO | stdout | 1. You should only decompose this complex user's question into some simple subtasks which can be executed easily by using one single tool in the tool list.
2024-04-19 11:35:43 | INFO | stdout | 2. If one subtask need the results from other subtask, you can should write clearly. For example:{"Tasks": ["Convert 23 km/h to X km/min by 'divide_'", "Multiply X km/min by 45 min to get Y by 'multiply_'"]}
2024-04-19 11:35:43 | INFO | stdout | 3. You must ONLY output in a parsible JSON format. An example output looks like:
2024-04-19 11:35:43 | INFO | stdout | '''
2024-04-19 11:35:43 | INFO | stdout | {"Tasks": [string 1, string 2, ...]}
2024-04-19 11:35:43 | INFO | stdout | '''
2024-04-19 11:35:43 | INFO | stdout | Output:
2024-04-19 11:35:43 | INFO | stdout | 
2024-04-19 11:35:43 | INFO | stdout | ```json
2024-04-19 11:35:43 | INFO | stdout | {
2024-04-19 11:35:43 | INFO | stdout |   "Tasks": [
2024-04-19 11:35:43 | INFO | stdout |     "Use tool with ID 13 to get user information from the image"
2024-04-19 11:35:43 | INFO | stdout |   ]
2024-04-19 11:35:43 | INFO | stdout | }
2024-04-19 11:35:43 | INFO | stdout | ```
2024-04-19 11:36:18 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The class `langchain_community.llms.huggingface_hub.HuggingFaceHub` was deprecated in langchain-community 0.0.21 and will be removed in 0.2.0. Use HuggingFaceEndpoint instead.
2024-04-19 11:36:18 | ERROR | stderr |   warn_deprecated(
2024-04-19 11:36:19 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The function `run` was deprecated in LangChain 0.1.0 and will be removed in 0.2.0. Use invoke instead.
2024-04-19 11:36:19 | ERROR | stderr |   warn_deprecated(
2024-04-19 11:36:20 | INFO | stdout | ['Use tool with ID 13 to get user information from the image']
2024-04-19 11:36:22 | INFO | stdout | [{'task': 'Use tool with ID 13 to get user information from the image', 'id': 1, 'dep': [-1]}]
2024-04-19 11:36:22 | INFO | stdout | {'Original Question': 'identify the person in this image', 1: {'task': 'Use tool with ID 13 to get user information from the image', 'answer': ''}}
2024-04-19 11:36:24 | INFO | stdout | {'ID': 13, 'standardized_name': 'http://192.168.6.161:4444/api/searchUser', 'API_description': "'http://192.168.6.161:4444/api/searchUser' returns the information of a person from a face image using for face recognition system", 'Usage': {'required_parameters': [{'name': 'file', 'type': 'List'}], 'Example': {'Scenario': 'if you want to find out the information of someone from image.', 'Parameters': {'file': ['image']}}}}
2024-04-19 11:36:27 | INFO | stdout | http://192.168.6.161:4444/api/searchUser
2024-04-19 11:36:27 | INFO | stdout | {'file': ['image']}
2024-04-19 11:37:19 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The class `langchain_community.llms.huggingface_hub.HuggingFaceHub` was deprecated in langchain-community 0.0.21 and will be removed in 0.2.0. Use HuggingFaceEndpoint instead.
2024-04-19 11:37:19 | ERROR | stderr |   warn_deprecated(
2024-04-19 11:37:20 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The function `run` was deprecated in LangChain 0.1.0 and will be removed in 0.2.0. Use invoke instead.
2024-04-19 11:37:20 | ERROR | stderr |   warn_deprecated(
2024-04-19 11:37:21 | INFO | stdout | ['Use tool with ID 13 to get user information from the image']
2024-04-19 11:37:21 | INFO | stdout | [{'task': 'Use tool with ID 13 to get user information from the image', 'id': 1, 'dep': [-1]}]
2024-04-19 11:37:21 | INFO | stdout | {'Original Question': 'identify the person in this image', 1: {'task': 'Use tool with ID 13 to get user information from the image', 'answer': ''}}
2024-04-19 11:37:22 | INFO | stdout | {'ID': 13, 'standardized_name': 'http://192.168.6.161:4444/api/searchUser', 'API_description': "'http://192.168.6.161:4444/api/searchUser' returns the information of a person from a face image using for face recognition system", 'Usage': {'required_parameters': [{'name': 'file', 'type': 'List'}], 'Example': {'Scenario': 'if you want to find out the information of someone from image.', 'Parameters': {'file': ['image']}}}}
2024-04-19 11:37:23 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 11:37:23 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 549, in <module>
2024-04-19 11:37:23 | ERROR | stderr |     agent.task_execution(default_conversation)
2024-04-19 11:37:23 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 504, in task_execution
2024-04-19 11:37:23 | ERROR | stderr |     tool_id, api_result, call_result, tool_instruction, API_instruction = self.retrieval(task, Tool_dic,
2024-04-19 11:37:23 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 473, in retrieval
2024-04-19 11:37:23 | ERROR | stderr |     call_result = self.Call_function(API_tool, parameters, state)
2024-04-19 11:37:23 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 56, in Call_function
2024-04-19 11:37:23 | ERROR | stderr |     all_images = state.get_images()
2024-04-19 11:37:23 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/conversation2.py", line 28, in get_images
2024-04-19 11:37:23 | ERROR | stderr |     if len(images[-1])==0:
2024-04-19 11:37:23 | ERROR | stderr | IndexError: list index out of range
2024-04-19 11:38:39 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The class `langchain_community.llms.huggingface_hub.HuggingFaceHub` was deprecated in langchain-community 0.0.21 and will be removed in 0.2.0. Use HuggingFaceEndpoint instead.
2024-04-19 11:38:39 | ERROR | stderr |   warn_deprecated(
2024-04-19 11:38:40 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The function `run` was deprecated in LangChain 0.1.0 and will be removed in 0.2.0. Use invoke instead.
2024-04-19 11:38:40 | ERROR | stderr |   warn_deprecated(
2024-04-19 11:38:42 | INFO | stdout | ['Use tool with ID 13 to get user information from the image']
2024-04-19 11:38:42 | INFO | stdout | [{'task': 'Use tool with ID 13 to get user information from the image', 'id': 1, 'dep': [-1]}]
2024-04-19 11:38:42 | INFO | stdout | {'Original Question': 'identify the person in this image', 1: {'task': 'Use tool with ID 13 to get user information from the image', 'answer': ''}}
2024-04-19 11:38:43 | INFO | stdout | {'ID': 13, 'standardized_name': 'http://192.168.6.161:4444/api/searchUser', 'API_description': "'http://192.168.6.161:4444/api/searchUser' returns the information of a person from a face image using for face recognition system", 'Usage': {'required_parameters': [{'name': 'file', 'type': 'List'}], 'Example': {'Scenario': 'if you want to find out the information of someone from image.', 'Parameters': {'file': ['image']}}}}
2024-04-19 11:38:44 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 11:38:44 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 549, in <module>
2024-04-19 11:38:44 | ERROR | stderr |     agent.task_execution(default_conversation)
2024-04-19 11:38:44 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 504, in task_execution
2024-04-19 11:38:44 | ERROR | stderr |     tool_id, api_result, call_result, tool_instruction, API_instruction = self.retrieval(task, Tool_dic,
2024-04-19 11:38:44 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 473, in retrieval
2024-04-19 11:38:44 | ERROR | stderr |     call_result = self.Call_function(API_tool, parameters, state)
2024-04-19 11:38:44 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 56, in Call_function
2024-04-19 11:38:44 | ERROR | stderr |     all_images = state.get_images()
2024-04-19 11:38:44 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/conversation2.py", line 28, in get_images
2024-04-19 11:38:44 | ERROR | stderr |     if len(images[-1])==0:
2024-04-19 11:38:44 | ERROR | stderr | IndexError: list index out of range
2024-04-19 11:40:22 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The class `langchain_community.llms.huggingface_hub.HuggingFaceHub` was deprecated in langchain-community 0.0.21 and will be removed in 0.2.0. Use HuggingFaceEndpoint instead.
2024-04-19 11:40:22 | ERROR | stderr |   warn_deprecated(
2024-04-19 11:40:23 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The function `run` was deprecated in LangChain 0.1.0 and will be removed in 0.2.0. Use invoke instead.
2024-04-19 11:40:23 | ERROR | stderr |   warn_deprecated(
2024-04-19 11:40:23 | INFO | stdout | ['Use tool with ID 13 to get user information from the image']
2024-04-19 11:40:24 | INFO | stdout | [{'task': 'Use tool with ID 13 to get user information from the image', 'id': 1, 'dep': [-1]}]
2024-04-19 11:40:24 | INFO | stdout | {'Original Question': 'identify the person in this image', 1: {'task': 'Use tool with ID 13 to get user information from the image', 'answer': ''}}
2024-04-19 11:40:25 | INFO | stdout | {'ID': 13, 'standardized_name': 'http://192.168.6.161:4444/api/searchUser', 'API_description': "'http://192.168.6.161:4444/api/searchUser' returns the information of a person from a face image using for face recognition system", 'Usage': {'required_parameters': [{'name': 'file', 'type': 'List'}], 'Example': {'Scenario': 'if you want to find out the information of someone from image.', 'Parameters': {'file': ['image']}}}}
2024-04-19 11:40:25 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 11:40:25 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 549, in <module>
2024-04-19 11:40:25 | ERROR | stderr |     agent.task_execution(default_conversation)
2024-04-19 11:40:25 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 504, in task_execution
2024-04-19 11:40:25 | ERROR | stderr |     tool_id, api_result, call_result, tool_instruction, API_instruction = self.retrieval(task, Tool_dic,
2024-04-19 11:40:25 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 473, in retrieval
2024-04-19 11:40:25 | ERROR | stderr |     call_result = self.Call_function(API_tool, parameters, state)
2024-04-19 11:40:25 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 56, in Call_function
2024-04-19 11:40:25 | ERROR | stderr |     all_images = state.get_images()
2024-04-19 11:40:25 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/conversation2.py", line 28, in get_images
2024-04-19 11:40:25 | ERROR | stderr |     if len(images[-1])==0:
2024-04-19 11:40:25 | ERROR | stderr | IndexError: list index out of range
2024-04-19 11:41:58 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The class `langchain_community.llms.huggingface_hub.HuggingFaceHub` was deprecated in langchain-community 0.0.21 and will be removed in 0.2.0. Use HuggingFaceEndpoint instead.
2024-04-19 11:41:58 | ERROR | stderr |   warn_deprecated(
2024-04-19 11:41:58 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The function `run` was deprecated in LangChain 0.1.0 and will be removed in 0.2.0. Use invoke instead.
2024-04-19 11:41:58 | ERROR | stderr |   warn_deprecated(
2024-04-19 11:41:59 | INFO | stdout | ['Use tool with ID 13 to get user information from the image']
2024-04-19 11:41:59 | INFO | stdout | [{'task': 'Use tool with ID 13 to get user information from the image', 'id': 1, 'dep': [-1]}]
2024-04-19 11:41:59 | INFO | stdout | {'Original Question': 'identify the person in this image', 1: {'task': 'Use tool with ID 13 to get user information from the image', 'answer': ''}}
2024-04-19 11:42:00 | INFO | stdout | {'ID': 13, 'standardized_name': 'http://192.168.6.161:4444/api/searchUser', 'API_description': "'http://192.168.6.161:4444/api/searchUser' returns the information of a person from a face image using for face recognition system", 'Usage': {'required_parameters': [{'name': 'file', 'type': 'List'}], 'Example': {'Scenario': 'if you want to find out the information of someone from image.', 'Parameters': {'file': ['image']}}}}
2024-04-19 11:42:01 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 11:42:01 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 549, in <module>
2024-04-19 11:42:01 | ERROR | stderr |     agent.task_execution(default_conversation)
2024-04-19 11:42:01 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 504, in task_execution
2024-04-19 11:42:01 | ERROR | stderr |     tool_id, api_result, call_result, tool_instruction, API_instruction = self.retrieval(task, Tool_dic,
2024-04-19 11:42:01 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 473, in retrieval
2024-04-19 11:42:01 | ERROR | stderr |     call_result = self.Call_function(API_tool, parameters, state)
2024-04-19 11:42:01 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 56, in Call_function
2024-04-19 11:42:01 | ERROR | stderr |     all_images = state.get_images()
2024-04-19 11:42:01 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/conversation2.py", line 32, in get_images
2024-04-19 11:42:01 | ERROR | stderr |     if image_process_mode[-1] == "Pad":
2024-04-19 11:42:01 | ERROR | stderr | NameError: name 'image_process_mode' is not defined
2024-04-19 11:43:01 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The class `langchain_community.llms.huggingface_hub.HuggingFaceHub` was deprecated in langchain-community 0.0.21 and will be removed in 0.2.0. Use HuggingFaceEndpoint instead.
2024-04-19 11:43:01 | ERROR | stderr |   warn_deprecated(
2024-04-19 11:43:01 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The function `run` was deprecated in LangChain 0.1.0 and will be removed in 0.2.0. Use invoke instead.
2024-04-19 11:43:01 | ERROR | stderr |   warn_deprecated(
2024-04-19 11:43:02 | INFO | stdout | ['Use tool with ID 13 to get user information from the image']
2024-04-19 11:43:03 | INFO | stdout | [{'task': 'Use tool with ID 13 to get user information from the image', 'id': 1, 'dep': [-1]}]
2024-04-19 11:43:03 | INFO | stdout | {'Original Question': 'identify the person in this image', 1: {'task': 'Use tool with ID 13 to get user information from the image', 'answer': ''}}
2024-04-19 11:43:04 | INFO | stdout | {'ID': 13, 'standardized_name': 'http://192.168.6.161:4444/api/searchUser', 'API_description': "'http://192.168.6.161:4444/api/searchUser' returns the information of a person from a face image using for face recognition system", 'Usage': {'required_parameters': [{'name': 'file', 'type': 'List'}], 'Example': {'Scenario': 'if you want to find out the information of someone from image.', 'Parameters': {'file': ['image']}}}}
2024-04-19 11:43:05 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 11:43:05 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 549, in <module>
2024-04-19 11:43:05 | ERROR | stderr |     agent.task_execution(default_conversation)
2024-04-19 11:43:05 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 504, in task_execution
2024-04-19 11:43:05 | ERROR | stderr |     tool_id, api_result, call_result, tool_instruction, API_instruction = self.retrieval(task, Tool_dic,
2024-04-19 11:43:05 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 473, in retrieval
2024-04-19 11:43:05 | ERROR | stderr |     call_result = self.Call_function(API_tool, parameters, state)
2024-04-19 11:43:05 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 56, in Call_function
2024-04-19 11:43:05 | ERROR | stderr |     all_images = state.get_images()
2024-04-19 11:43:05 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/conversation2.py", line 57, in get_images
2024-04-19 11:43:05 | ERROR | stderr |     raise ValueError(
2024-04-19 11:43:05 | ERROR | stderr | ValueError: Invalid image_process_mode: Pad
2024-04-19 11:43:29 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The class `langchain_community.llms.huggingface_hub.HuggingFaceHub` was deprecated in langchain-community 0.0.21 and will be removed in 0.2.0. Use HuggingFaceEndpoint instead.
2024-04-19 11:43:29 | ERROR | stderr |   warn_deprecated(
2024-04-19 11:43:30 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The function `run` was deprecated in LangChain 0.1.0 and will be removed in 0.2.0. Use invoke instead.
2024-04-19 11:43:30 | ERROR | stderr |   warn_deprecated(
2024-04-19 11:43:31 | INFO | stdout | ['Use tool with ID 13 to get user information from the image']
2024-04-19 11:43:31 | INFO | stdout | [{'task': 'Use tool with ID 13 to get user information from the image', 'id': 1, 'dep': [-1]}]
2024-04-19 11:43:31 | INFO | stdout | {'Original Question': 'identify the person in this image', 1: {'task': 'Use tool with ID 13 to get user information from the image', 'answer': ''}}
2024-04-19 11:43:32 | INFO | stdout | {'ID': 13, 'standardized_name': 'http://192.168.6.161:4444/api/searchUser', 'API_description': "'http://192.168.6.161:4444/api/searchUser' returns the information of a person from a face image using for face recognition system", 'Usage': {'required_parameters': [{'name': 'file', 'type': 'List'}], 'Example': {'Scenario': 'if you want to find out the information of someone from image.', 'Parameters': {'file': ['image']}}}}
2024-04-19 11:43:36 | INFO | stdout | <Response [200]>
2024-04-19 11:44:33 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The class `langchain_community.llms.huggingface_hub.HuggingFaceHub` was deprecated in langchain-community 0.0.21 and will be removed in 0.2.0. Use HuggingFaceEndpoint instead.
2024-04-19 11:44:33 | ERROR | stderr |   warn_deprecated(
2024-04-19 11:44:34 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The function `run` was deprecated in LangChain 0.1.0 and will be removed in 0.2.0. Use invoke instead.
2024-04-19 11:44:34 | ERROR | stderr |   warn_deprecated(
2024-04-19 11:44:35 | INFO | stdout | ['Use tool with ID 13 to get user information from the image']
2024-04-19 11:44:36 | INFO | stdout | [{'task': 'Use tool with ID 13 to get user information from the image', 'id': 1, 'dep': [-1]}]
2024-04-19 11:44:36 | INFO | stdout | {'Original Question': 'identify the person in this image', 1: {'task': 'Use tool with ID 13 to get user information from the image', 'answer': ''}}
2024-04-19 11:44:38 | INFO | stdout | {'ID': 13, 'standardized_name': 'http://192.168.6.161:4444/api/searchUser', 'API_description': "'http://192.168.6.161:4444/api/searchUser' returns the information of a person from a face image using for face recognition system", 'Usage': {'required_parameters': [{'name': 'file', 'type': 'List'}], 'Example': {'Scenario': 'if you want to find out the information of someone from image.', 'Parameters': {'file': ['image']}}}}
2024-04-19 11:44:38 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 11:44:38 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 549, in <module>
2024-04-19 11:44:38 | ERROR | stderr |     agent.task_execution(default_conversation)
2024-04-19 11:44:38 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 504, in task_execution
2024-04-19 11:44:38 | ERROR | stderr |     tool_id, api_result, call_result, tool_instruction, API_instruction = self.retrieval(task, Tool_dic,
2024-04-19 11:44:38 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 473, in retrieval
2024-04-19 11:44:38 | ERROR | stderr |     call_result = self.Call_function(API_tool, parameters, state)
2024-04-19 11:44:38 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 61, in Call_function
2024-04-19 11:44:38 | ERROR | stderr |     res = requests.request("POST", url=api_skill, headers=headers, data=payload, files=files[0])
2024-04-19 11:44:38 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/requests/api.py", line 59, in request
2024-04-19 11:44:38 | ERROR | stderr |     return session.request(method=method, url=url, **kwargs)
2024-04-19 11:44:38 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/requests/sessions.py", line 575, in request
2024-04-19 11:44:38 | ERROR | stderr |     prep = self.prepare_request(req)
2024-04-19 11:44:38 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/requests/sessions.py", line 486, in prepare_request
2024-04-19 11:44:38 | ERROR | stderr |     p.prepare(
2024-04-19 11:44:38 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/requests/models.py", line 371, in prepare
2024-04-19 11:44:38 | ERROR | stderr |     self.prepare_body(data, files, json)
2024-04-19 11:44:38 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/requests/models.py", line 556, in prepare_body
2024-04-19 11:44:38 | ERROR | stderr |     (body, content_type) = self._encode_files(files, data)
2024-04-19 11:44:38 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/requests/models.py", line 173, in _encode_files
2024-04-19 11:44:38 | ERROR | stderr |     for (k, v) in files:
2024-04-19 11:44:38 | ERROR | stderr | ValueError: too many values to unpack (expected 2)
2024-04-19 11:47:14 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The class `langchain_community.llms.huggingface_hub.HuggingFaceHub` was deprecated in langchain-community 0.0.21 and will be removed in 0.2.0. Use HuggingFaceEndpoint instead.
2024-04-19 11:47:14 | ERROR | stderr |   warn_deprecated(
2024-04-19 11:47:14 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The function `run` was deprecated in LangChain 0.1.0 and will be removed in 0.2.0. Use invoke instead.
2024-04-19 11:47:14 | ERROR | stderr |   warn_deprecated(
2024-04-19 11:47:16 | INFO | stdout | ['Use tool with ID 13 to get user information from the image']
2024-04-19 11:47:17 | INFO | stdout | [{'task': 'Use tool with ID 13 to get user information from the image', 'id': 1, 'dep': [-1]}]
2024-04-19 11:47:17 | INFO | stdout | {'Original Question': 'identify the person in this image', 1: {'task': 'Use tool with ID 13 to get user information from the image', 'answer': ''}}
2024-04-19 11:47:18 | INFO | stdout | {'ID': 13, 'standardized_name': 'http://192.168.6.161:4444/api/searchUser', 'API_description': "'http://192.168.6.161:4444/api/searchUser' returns the information of a person from a face image using for face recognition system", 'Usage': {'required_parameters': [{'name': 'file', 'type': 'List'}], 'Example': {'Scenario': 'if you want to find out the information of someone from image.', 'Parameters': {'file': ['image']}}}}
2024-04-19 11:47:19 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 11:47:19 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 549, in <module>
2024-04-19 11:47:19 | ERROR | stderr |     agent.task_execution(default_conversation)
2024-04-19 11:47:19 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 504, in task_execution
2024-04-19 11:47:19 | ERROR | stderr |     tool_id, api_result, call_result, tool_instruction, API_instruction = self.retrieval(task, Tool_dic,
2024-04-19 11:47:19 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 473, in retrieval
2024-04-19 11:47:19 | ERROR | stderr |     call_result = self.Call_function(API_tool, parameters, state)
2024-04-19 11:47:19 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 61, in Call_function
2024-04-19 11:47:19 | ERROR | stderr |     res = requests.request("POST", url=api_skill, headers=headers, data=payload, file=files[0])
2024-04-19 11:47:19 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/requests/api.py", line 59, in request
2024-04-19 11:47:19 | ERROR | stderr |     return session.request(method=method, url=url, **kwargs)
2024-04-19 11:47:19 | ERROR | stderr | TypeError: Session.request() got an unexpected keyword argument 'file'
2024-04-19 11:48:01 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The class `langchain_community.llms.huggingface_hub.HuggingFaceHub` was deprecated in langchain-community 0.0.21 and will be removed in 0.2.0. Use HuggingFaceEndpoint instead.
2024-04-19 11:48:01 | ERROR | stderr |   warn_deprecated(
2024-04-19 11:48:01 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The function `run` was deprecated in LangChain 0.1.0 and will be removed in 0.2.0. Use invoke instead.
2024-04-19 11:48:01 | ERROR | stderr |   warn_deprecated(
2024-04-19 11:48:02 | INFO | stdout | ['Use tool with ID 13 to get user information from the image']
2024-04-19 11:48:03 | INFO | stdout | [{'task': 'Use tool with ID 13 to get user information from the image', 'id': 1, 'dep': [-1]}]
2024-04-19 11:48:03 | INFO | stdout | {'Original Question': 'identify the person in this image', 1: {'task': 'Use tool with ID 13 to get user information from the image', 'answer': ''}}
2024-04-19 11:48:03 | INFO | stdout | {'ID': 13, 'standardized_name': 'http://192.168.6.161:4444/api/searchUser', 'API_description': "'http://192.168.6.161:4444/api/searchUser' returns the information of a person from a face image using for face recognition system", 'Usage': {'required_parameters': [{'name': 'file', 'type': 'List'}], 'Example': {'Scenario': 'if you want to find out the information of someone from image.', 'Parameters': {'file': ['image']}}}}
2024-04-19 11:48:04 | INFO | stdout | [('image', '')]
2024-04-19 11:48:04 | INFO | stdout | <Response [200]>
2024-04-19 11:52:02 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The class `langchain_community.llms.huggingface_hub.HuggingFaceHub` was deprecated in langchain-community 0.0.21 and will be removed in 0.2.0. Use HuggingFaceEndpoint instead.
2024-04-19 11:52:02 | ERROR | stderr |   warn_deprecated(
2024-04-19 11:52:03 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The function `run` was deprecated in LangChain 0.1.0 and will be removed in 0.2.0. Use invoke instead.
2024-04-19 11:52:03 | ERROR | stderr |   warn_deprecated(
2024-04-19 11:52:04 | INFO | stdout | ['Use tool with ID 13 to get user information from the image']
2024-04-19 11:52:05 | INFO | stdout | [{'task': 'Use tool with ID 13 to get user information from the image', 'id': 1, 'dep': [-1]}]
2024-04-19 11:52:05 | INFO | stdout | {'Original Question': 'identify the person in this image', 1: {'task': 'Use tool with ID 13 to get user information from the image', 'answer': ''}}
2024-04-19 11:52:05 | INFO | stdout | {'ID': 13, 'standardized_name': 'http://192.168.6.161:4444/api/searchUser', 'API_description': "'http://192.168.6.161:4444/api/searchUser' returns the information of a person from a face image using for face recognition system", 'Usage': {'required_parameters': [{'name': 'file', 'type': 'List'}], 'Example': {'Scenario': 'if you want to find out the information of someone from image.', 'Parameters': {'file': ['image']}}}}
2024-04-19 11:52:06 | INFO | stdout | [('image', '')]
2024-04-19 11:52:08 | INFO | stdout | {
2024-04-19 11:52:08 | INFO | stdout |     "success": false,
2024-04-19 11:52:08 | INFO | stdout |     "error": "cannot identify image file <_io.BytesIO object at 0x7f18600b5770>"
2024-04-19 11:52:08 | INFO | stdout | }
2024-04-19 11:52:08 | INFO | stdout | 
2024-04-19 11:56:30 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The class `langchain_community.llms.huggingface_hub.HuggingFaceHub` was deprecated in langchain-community 0.0.21 and will be removed in 0.2.0. Use HuggingFaceEndpoint instead.
2024-04-19 11:56:30 | ERROR | stderr |   warn_deprecated(
2024-04-19 11:56:32 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The function `run` was deprecated in LangChain 0.1.0 and will be removed in 0.2.0. Use invoke instead.
2024-04-19 11:56:32 | ERROR | stderr |   warn_deprecated(
2024-04-19 11:56:33 | INFO | stdout | ['Use tool with ID 13 to get user information from the image']
2024-04-19 11:56:34 | INFO | stdout | [{'task': 'Use tool with ID 13 to get user information from the image', 'id': 1, 'dep': [-1]}]
2024-04-19 11:56:34 | INFO | stdout | {'Original Question': 'identify the person in this image', 1: {'task': 'Use tool with ID 13 to get user information from the image', 'answer': ''}}
2024-04-19 11:56:35 | INFO | stdout | {'ID': 13, 'standardized_name': 'http://192.168.6.161:4444/api/searchUser', 'API_description': "'http://192.168.6.161:4444/api/searchUser' returns the information of a person from a face image using for face recognition system", 'Usage': {'required_parameters': [{'name': 'file', 'type': 'List'}], 'Example': {'Scenario': 'if you want to find out the information of someone from image.', 'Parameters': {'file': ['image']}}}}
2024-04-19 11:56:59 | INFO | stdout | {
2024-04-19 11:56:59 | INFO | stdout |     "success": false,
2024-04-19 11:56:59 | INFO | stdout |     "error": "Don't find any user"
2024-04-19 11:56:59 | INFO | stdout | }
2024-04-19 11:56:59 | INFO | stdout | 
2024-04-19 12:04:25 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The class `langchain_community.llms.huggingface_hub.HuggingFaceHub` was deprecated in langchain-community 0.0.21 and will be removed in 0.2.0. Use HuggingFaceEndpoint instead.
2024-04-19 12:04:25 | ERROR | stderr |   warn_deprecated(
2024-04-19 12:04:25 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The function `run` was deprecated in LangChain 0.1.0 and will be removed in 0.2.0. Use invoke instead.
2024-04-19 12:04:25 | ERROR | stderr |   warn_deprecated(
2024-04-19 12:04:27 | INFO | stdout | ['Use tool with ID 13 to get user information from the image']
2024-04-19 12:04:28 | INFO | stdout | [{'task': 'Use tool with ID 13 to get user information from the image', 'id': 1, 'dep': [-1]}]
2024-04-19 12:04:28 | INFO | stdout | {'Original Question': 'identify the person in this image', 1: {'task': 'Use tool with ID 13 to get user information from the image', 'answer': ''}}
2024-04-19 12:04:29 | INFO | stdout | {'ID': 13, 'standardized_name': 'http://192.168.6.161:4444/api/searchUser', 'API_description': "'http://192.168.6.161:4444/api/searchUser' returns the information of a person from a face image using for face recognition system", 'Usage': {'required_parameters': [{'name': 'file', 'type': 'List'}], 'Example': {'Scenario': 'if you want to find out the information of someone from image.', 'Parameters': {'file': ['image']}}}}
2024-04-19 12:04:48 | INFO | stdout | {
2024-04-19 12:04:48 | INFO | stdout |     "success": false,
2024-04-19 12:04:48 | INFO | stdout |     "error": "Don't find any user"
2024-04-19 12:04:48 | INFO | stdout | }
2024-04-19 12:04:48 | INFO | stdout | 
2024-04-19 12:04:48 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 12:04:48 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 553, in <module>
2024-04-19 12:04:48 | ERROR | stderr |     agent.task_execution(default_conversation)
2024-04-19 12:04:48 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 508, in task_execution
2024-04-19 12:04:48 | ERROR | stderr |     tool_id, api_result, call_result, tool_instruction, API_instruction = self.retrieval(task, Tool_dic,
2024-04-19 12:04:48 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 477, in retrieval
2024-04-19 12:04:48 | ERROR | stderr |     call_result = self.Call_function(API_tool, parameters, state)
2024-04-19 12:04:48 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 63, in Call_function
2024-04-19 12:04:48 | ERROR | stderr |     print(not res.text["success"])
2024-04-19 12:04:48 | ERROR | stderr | TypeError: string indices must be integers
2024-04-19 12:06:28 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The class `langchain_community.llms.huggingface_hub.HuggingFaceHub` was deprecated in langchain-community 0.0.21 and will be removed in 0.2.0. Use HuggingFaceEndpoint instead.
2024-04-19 12:06:28 | ERROR | stderr |   warn_deprecated(
2024-04-19 12:06:29 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The function `run` was deprecated in LangChain 0.1.0 and will be removed in 0.2.0. Use invoke instead.
2024-04-19 12:06:29 | ERROR | stderr |   warn_deprecated(
2024-04-19 12:06:30 | INFO | stdout | ['Use tool with ID 13 to get user information from the image']
2024-04-19 12:06:31 | INFO | stdout | [{'task': 'Use tool with ID 13 to get user information from the image', 'id': 1, 'dep': [-1]}]
2024-04-19 12:06:31 | INFO | stdout | {'Original Question': 'identify the person in this image', 1: {'task': 'Use tool with ID 13 to get user information from the image', 'answer': ''}}
2024-04-19 12:06:31 | INFO | stdout | {'ID': 13, 'standardized_name': 'http://192.168.6.161:4444/api/searchUser', 'API_description': "'http://192.168.6.161:4444/api/searchUser' returns the information of a person from a face image using for face recognition system", 'Usage': {'required_parameters': [{'name': 'file', 'type': 'List'}], 'Example': {'Scenario': 'if you want to find out the information of someone from image.', 'Parameters': {'file': ['image']}}}}
2024-04-19 12:06:51 | INFO | stdout | <bound method Response.json of <Response [200]>>
2024-04-19 12:06:51 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 12:06:51 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 553, in <module>
2024-04-19 12:06:51 | ERROR | stderr |     agent.task_execution(default_conversation)
2024-04-19 12:06:51 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 508, in task_execution
2024-04-19 12:06:51 | ERROR | stderr |     tool_id, api_result, call_result, tool_instruction, API_instruction = self.retrieval(task, Tool_dic,
2024-04-19 12:06:51 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 477, in retrieval
2024-04-19 12:06:51 | ERROR | stderr |     call_result = self.Call_function(API_tool, parameters, state)
2024-04-19 12:06:51 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 63, in Call_function
2024-04-19 12:06:51 | ERROR | stderr |     print(not res.json["success"])
2024-04-19 12:06:51 | ERROR | stderr | TypeError: 'method' object is not subscriptable
2024-04-19 12:08:08 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The class `langchain_community.llms.huggingface_hub.HuggingFaceHub` was deprecated in langchain-community 0.0.21 and will be removed in 0.2.0. Use HuggingFaceEndpoint instead.
2024-04-19 12:08:08 | ERROR | stderr |   warn_deprecated(
2024-04-19 12:08:09 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The function `run` was deprecated in LangChain 0.1.0 and will be removed in 0.2.0. Use invoke instead.
2024-04-19 12:08:09 | ERROR | stderr |   warn_deprecated(
2024-04-19 12:08:10 | INFO | stdout | ['Use tool with ID 13 to get user information from the image']
2024-04-19 12:08:10 | INFO | stdout | [{'task': 'Use tool with ID 13 to get user information from the image', 'id': 1, 'dep': [-1]}]
2024-04-19 12:08:10 | INFO | stdout | {'Original Question': 'identify the person in this image', 1: {'task': 'Use tool with ID 13 to get user information from the image', 'answer': ''}}
2024-04-19 12:08:11 | INFO | stdout | {'ID': 13, 'standardized_name': 'http://192.168.6.161:4444/api/searchUser', 'API_description': "'http://192.168.6.161:4444/api/searchUser' returns the information of a person from a face image using for face recognition system", 'Usage': {'required_parameters': [{'name': 'file', 'type': 'List'}], 'Example': {'Scenario': 'if you want to find out the information of someone from image.', 'Parameters': {'file': ['image']}}}}
2024-04-19 12:08:34 | INFO | stdout | {'success': False, 'error': "Don't find any user"}
2024-04-19 12:08:34 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 12:08:34 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 553, in <module>
2024-04-19 12:08:34 | ERROR | stderr |     agent.task_execution(default_conversation)
2024-04-19 12:08:34 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 508, in task_execution
2024-04-19 12:08:34 | ERROR | stderr |     tool_id, api_result, call_result, tool_instruction, API_instruction = self.retrieval(task, Tool_dic,
2024-04-19 12:08:34 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 477, in retrieval
2024-04-19 12:08:34 | ERROR | stderr |     call_result = self.Call_function(API_tool, parameters, state)
2024-04-19 12:08:34 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 63, in Call_function
2024-04-19 12:08:34 | ERROR | stderr |     print(not res.json["success"])
2024-04-19 12:08:34 | ERROR | stderr | TypeError: 'method' object is not subscriptable
2024-04-19 12:28:26 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The class `langchain_community.llms.huggingface_hub.HuggingFaceHub` was deprecated in langchain-community 0.0.21 and will be removed in 0.2.0. Use HuggingFaceEndpoint instead.
2024-04-19 12:28:26 | ERROR | stderr |   warn_deprecated(
2024-04-19 12:28:26 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The function `run` was deprecated in LangChain 0.1.0 and will be removed in 0.2.0. Use invoke instead.
2024-04-19 12:28:26 | ERROR | stderr |   warn_deprecated(
2024-04-19 12:28:27 | INFO | stdout | ['Use tool with ID 13 to get user information from the image']
2024-04-19 12:28:28 | INFO | stdout | [{'task': 'Use tool with ID 13 to get user information from the image', 'id': 1, 'dep': [-1]}]
2024-04-19 12:28:28 | INFO | stdout | {'Original Question': 'identify the person in this image', 1: {'task': 'Use tool with ID 13 to get user information from the image', 'answer': ''}}
2024-04-19 12:28:29 | INFO | stdout | {'ID': 13, 'standardized_name': 'http://192.168.6.161:4444/api/searchUser', 'API_description': "'http://192.168.6.161:4444/api/searchUser' returns the information of a person from a face image using for face recognition system", 'Usage': {'required_parameters': [{'name': 'file', 'type': 'List'}], 'Example': {'Scenario': 'if you want to find out the information of someone from image.', 'Parameters': {'file': ['image']}}}}
2024-04-19 12:28:41 | INFO | stdout | {'success': False, 'error': "Don't find any user"}
2024-04-19 12:28:41 | INFO | stdout | True
2024-04-19 12:28:41 | INFO | stdout | Tool cannot return the right anwser, the reason is Don't find any user
2024-04-19 12:28:53 | INFO | stdout | {'Reason': 'The response is based on the information provided by a tool, and the tool did not identify any user in the image. This is a reasonable and accurate answer to the question, as it directly addresses the query and provides the necessary information.', 'Choice': 'Yes'}
2024-04-19 12:28:53 | INFO | stdout | Based on the information provided by the tool with ID 13, there is no user identified in the image.
2024-04-19 13:07:14 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The class `langchain_community.llms.huggingface_hub.HuggingFaceHub` was deprecated in langchain-community 0.0.21 and will be removed in 0.2.0. Use HuggingFaceEndpoint instead.
2024-04-19 13:07:14 | ERROR | stderr |   warn_deprecated(
2024-04-19 13:07:15 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The function `run` was deprecated in LangChain 0.1.0 and will be removed in 0.2.0. Use invoke instead.
2024-04-19 13:07:15 | ERROR | stderr |   warn_deprecated(
2024-04-19 13:07:16 | INFO | stdout | ['Use tool with ID 13 to get user information from the image']
2024-04-19 13:07:16 | INFO | stdout | [{'task': 'Use tool with ID 13 to get user information from the image', 'id': 1, 'dep': [-1]}]
2024-04-19 13:07:16 | INFO | stdout | {'Original Question': 'identify the person in this image', 1: {'task': 'Use tool with ID 13 to get user information from the image', 'answer': ''}}
2024-04-19 13:07:17 | INFO | stdout | {'ID': 13, 'standardized_name': 'http://192.168.6.161:4444/api/searchUser', 'API_description': "'http://192.168.6.161:4444/api/searchUser' returns the information of a person from a face image using for face recognition system", 'Usage': {'required_parameters': [{'name': 'file', 'type': 'List'}], 'Example': {'Scenario': 'if you want to find out the information of someone from image.', 'Parameters': {'file': ['image']}}}}
2024-04-19 13:07:39 | INFO | stdout | {'success': True, 'Information': {'code': 'aZetCPJc', 'name': 'thanhf', 'birthday': '2001-04-13T17:00:00.000Z', 'avatar': 'static/avatar/aZetCPJc/face_1.jpg', 'similarity': 0.79052734375}}
2024-04-19 13:07:39 | INFO | stdout | False
2024-04-19 13:07:39 | INFO | stdout | {'code': 'aZetCPJc', 'name': 'thanhf', 'birthday': '2001-04-13T17:00:00.000Z', 'avatar': 'static/avatar/aZetCPJc/face_1.jpg', 'similarity': 0.79052734375}
2024-04-19 13:07:56 | INFO | stdout | {'Reason': "The response contains specific information about a person's name, birthdate, and a location of their avatar, which were likely extracted from the image using an image recognition tool. The similarity score also indicates a level of confidence in the extracted information.", 'Choice': 'Yes'}
2024-04-19 13:07:56 | INFO | stdout | Based on the information extracted from the image using tool with ID 13, the person in the image is thanhf. They were born on April 13, 2001. The similarity score of the extracted information is 0.79052734375. You can view their avatar at 'static/avatar/aZetCPJc/face_1.jpg'.
2024-04-19 14:03:49 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The class `langchain_community.llms.huggingface_hub.HuggingFaceHub` was deprecated in langchain-community 0.0.21 and will be removed in 0.2.0. Use HuggingFaceEndpoint instead.
2024-04-19 14:03:49 | ERROR | stderr |   warn_deprecated(
2024-04-19 14:03:49 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The function `run` was deprecated in LangChain 0.1.0 and will be removed in 0.2.0. Use invoke instead.
2024-04-19 14:03:49 | ERROR | stderr |   warn_deprecated(
2024-04-19 14:03:50 | INFO | stdout | ['Use tool with ID 13 to get user information from the image']
2024-04-19 14:03:51 | INFO | stdout | [{'task': 'Use tool with ID 13 to get user information from the image', 'id': 1, 'dep': [-1]}]
2024-04-19 14:03:51 | INFO | stdout | {'Original Question': 'identify the person in this image', 1: {'task': 'Use tool with ID 13 to get user information from the image', 'answer': ''}}
2024-04-19 14:03:52 | INFO | stdout | {'ID': 13, 'standardized_name': 'http://192.168.6.161:4444/api/searchUser', 'API_description': "'http://192.168.6.161:4444/api/searchUser' returns the information of a person from a face image using for face recognition system", 'Usage': {'required_parameters': [{'name': 'file', 'type': 'List'}], 'Example': {'Scenario': 'if you want to find out the information of someone from image.', 'Parameters': {'file': ['image']}}}}
2024-04-19 14:04:06 | INFO | stdout | {'success': True, 'Information': {'code': 'aZetCPJc', 'name': 'thanhf', 'birthday': '2001-04-13T17:00:00.000Z', 'avatar': 'static/avatar/aZetCPJc/face_1.jpg', 'similarity': 0.79052734375}}
2024-04-19 14:04:06 | INFO | stdout | {'code': 'aZetCPJc', 'name': 'thanhf', 'birthday': '2001-04-13T17:00:00.000Z', 'avatar': 'static/avatar/aZetCPJc/face_1.jpg', 'similarity': 0.79052734375}
2024-04-19 14:04:08 | INFO | stdout | {'Reason': "The response contains specific information about a person's name, birthdate, and a location of their avatar, which were likely extracted from the image using an image recognition tool. The similarity score also indicates a level of confidence in the extracted information.", 'Choice': 'Yes'}
2024-04-19 14:04:08 | INFO | stdout | Based on the information extracted from the image using tool with ID 13, the person in the image is thanhf. They were born on April 13, 2001. The similarity score of the extracted information is 0.79052734375. You can view their avatar at 'static/avatar/aZetCPJc/face_1.jpg'.
2024-04-19 16:12:36 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 16:12:36 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/app2.py", line 6, in <module>
2024-04-19 16:12:36 | ERROR | stderr |     from llava_module.agents_worker import bot_execute, bot_load_init, add_topic, add_doc, add_text
2024-04-19 16:12:36 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 10, in <module>
2024-04-19 16:12:36 | ERROR | stderr |     from conversation2 import Conversation
2024-04-19 16:12:36 | ERROR | stderr | ModuleNotFoundError: No module named 'conversation2'
2024-04-19 16:13:42 | INFO | stdout | ['images', 'voices']
2024-04-19 16:20:53 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 16:20:53 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/app2.py", line 227, in <module>
2024-04-19 16:20:53 | ERROR | stderr |     convers = [f for f in os.listdir(convers) if f.endswith('.txt')]
2024-04-19 16:20:53 | ERROR | stderr | TypeError: listdir: path should be string, bytes, os.PathLike, integer or None, not list
2024-04-19 16:21:13 | INFO | stdout | []
2024-04-19 16:21:21 | INFO | stdout | []
2024-04-19 16:24:41 | INFO | stdout | ['a.json']
2024-04-19 16:25:17 | INFO | stdout | ['a.json']
2024-04-19 16:27:08 | INFO | stdout | ['a.json']
2024-04-19 16:30:36 | INFO | stdout | ['a']
2024-04-19 16:31:24 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 16:31:24 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/app2.py", line 231, in <module>
2024-04-19 16:31:24 | ERROR | stderr |     demo = build_demo()
2024-04-19 16:31:24 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/app2.py", line 116, in build_demo
2024-04-19 16:31:24 | ERROR | stderr |     imagebox = ImageMask()
2024-04-19 16:31:24 | ERROR | stderr | NameError: name 'ImageMask' is not defined
2024-04-19 16:53:16 | INFO | stdout | Running on local URL:  http://0.0.0.0:8888
2024-04-19 16:53:16 | INFO | stdout | 
2024-04-19 16:53:16 | INFO | stdout | To create a public link, set `share=True` in `launch()`.
2024-04-19 16:53:45 | INFO | stdout | {}
2024-04-19 16:53:45 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 16:53:45 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/routes.py", line 437, in run_predict
2024-04-19 16:53:45 | ERROR | stderr |     output = await app.get_blocks().process_api(
2024-04-19 16:53:45 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 1355, in process_api
2024-04-19 16:53:45 | ERROR | stderr |     data = self.postprocess_data(fn_index, result["prediction"], state)
2024-04-19 16:53:45 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 1258, in postprocess_data
2024-04-19 16:53:45 | ERROR | stderr |     self.validate_outputs(fn_index, predictions)  # type: ignore
2024-04-19 16:53:45 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 1233, in validate_outputs
2024-04-19 16:53:45 | ERROR | stderr |     raise ValueError(
2024-04-19 16:53:45 | ERROR | stderr | ValueError: An event handler (load_demo) didn't receive enough output values (needed: 7, received: 1).
2024-04-19 16:53:45 | ERROR | stderr | Wanted outputs:
2024-04-19 16:53:45 | ERROR | stderr |     [state, dropdown, chatbot, textbox, button, <gradio.layouts.Row object at 0x7ff052a4ff40>, <gradio.layouts.Accordion object at 0x7ff052a4f430>]
2024-04-19 16:53:45 | ERROR | stderr | Received outputs:
2024-04-19 16:53:45 | ERROR | stderr |     [None]
2024-04-19 16:54:39 | INFO | stdout | Keyboard interruption in main thread... closing server.
2024-04-19 16:54:46 | INFO | stdout | Running on local URL:  http://0.0.0.0:8888
2024-04-19 16:54:46 | INFO | stdout | 
2024-04-19 16:54:46 | INFO | stdout | To create a public link, set `share=True` in `launch()`.
2024-04-19 16:54:57 | INFO | stdout | {}
2024-04-19 16:56:03 | INFO | stdout | {}
2024-04-19 16:56:08 | INFO | stdout | Keyboard interruption in main thread... closing server.
2024-04-19 16:56:15 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/utils.py:766: UserWarning: Expected 0 arguments for function <function load_demo at 0x7f5575902050>, received 1.
2024-04-19 16:56:15 | ERROR | stderr |   warnings.warn(
2024-04-19 16:56:15 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/utils.py:774: UserWarning: Expected maximum 0 arguments for function <function load_demo at 0x7f5575902050>, received 1.
2024-04-19 16:56:15 | ERROR | stderr |   warnings.warn(
2024-04-19 16:56:15 | INFO | stdout | Running on local URL:  http://0.0.0.0:8888
2024-04-19 16:56:15 | INFO | stdout | 
2024-04-19 16:56:15 | INFO | stdout | To create a public link, set `share=True` in `launch()`.
2024-04-19 16:56:17 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 16:56:17 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/routes.py", line 437, in run_predict
2024-04-19 16:56:17 | ERROR | stderr |     output = await app.get_blocks().process_api(
2024-04-19 16:56:17 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 1352, in process_api
2024-04-19 16:56:17 | ERROR | stderr |     result = await self.call_function(
2024-04-19 16:56:17 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 1077, in call_function
2024-04-19 16:56:17 | ERROR | stderr |     prediction = await anyio.to_thread.run_sync(
2024-04-19 16:56:17 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/anyio/to_thread.py", line 56, in run_sync
2024-04-19 16:56:17 | ERROR | stderr |     return await get_async_backend().run_sync_in_worker_thread(
2024-04-19 16:56:17 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 2144, in run_sync_in_worker_thread
2024-04-19 16:56:17 | ERROR | stderr |     return await future
2024-04-19 16:56:17 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 851, in run
2024-04-19 16:56:17 | ERROR | stderr |     result = context.run(func, *args)
2024-04-19 16:56:17 | ERROR | stderr | TypeError: load_demo() takes 1 positional argument but 2 were given
2024-04-19 16:56:45 | INFO | stdout | Keyboard interruption in main thread... closing server.
2024-04-19 16:56:45 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 16:56:45 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 2058, in block_thread
2024-04-19 16:56:45 | ERROR | stderr |     time.sleep(0.1)
2024-04-19 16:56:45 | ERROR | stderr | KeyboardInterrupt
2024-04-19 16:56:45 | ERROR | stderr | 
2024-04-19 16:56:45 | ERROR | stderr | During handling of the above exception, another exception occurred:
2024-04-19 16:56:45 | ERROR | stderr | 
2024-04-19 16:56:45 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 16:56:45 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/app2.py", line 263, in <module>
2024-04-19 16:56:45 | ERROR | stderr |     demo = build_demo()
2024-04-19 16:56:45 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 1975, in launch
2024-04-19 16:56:45 | ERROR | stderr |     self.block_thread()
2024-04-19 16:56:45 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 2061, in block_thread
2024-04-19 16:56:45 | ERROR | stderr |     self.server.close()
2024-04-19 16:56:45 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/networking.py", line 43, in close
2024-04-19 16:56:45 | ERROR | stderr |     self.thread.join()
2024-04-19 16:56:45 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/threading.py", line 1096, in join
2024-04-19 16:56:45 | ERROR | stderr |     self._wait_for_tstate_lock()
2024-04-19 16:56:45 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/threading.py", line 1116, in _wait_for_tstate_lock
2024-04-19 16:56:45 | ERROR | stderr |     if lock.acquire(block, timeout):
2024-04-19 16:56:45 | ERROR | stderr | KeyboardInterrupt
2024-04-19 16:56:52 | INFO | stdout | Running on local URL:  http://0.0.0.0:8888
2024-04-19 16:56:52 | INFO | stdout | 
2024-04-19 16:56:52 | INFO | stdout | To create a public link, set `share=True` in `launch()`.
2024-04-19 16:57:12 | INFO | stdout | Keyboard interruption in main thread... closing server.
2024-04-19 16:57:12 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 16:57:12 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 2058, in block_thread
2024-04-19 16:57:12 | ERROR | stderr |     time.sleep(0.1)
2024-04-19 16:57:12 | ERROR | stderr | KeyboardInterrupt
2024-04-19 16:57:12 | ERROR | stderr | 
2024-04-19 16:57:12 | ERROR | stderr | During handling of the above exception, another exception occurred:
2024-04-19 16:57:12 | ERROR | stderr | 
2024-04-19 16:57:12 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 16:57:12 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/app2.py", line 264, in <module>
2024-04-19 16:57:12 | ERROR | stderr |     demo.queue(
2024-04-19 16:57:12 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 1975, in launch
2024-04-19 16:57:12 | ERROR | stderr |     self.block_thread()
2024-04-19 16:57:12 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 2061, in block_thread
2024-04-19 16:57:12 | ERROR | stderr |     self.server.close()
2024-04-19 16:57:12 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/networking.py", line 43, in close
2024-04-19 16:57:12 | ERROR | stderr |     self.thread.join()
2024-04-19 16:57:12 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/threading.py", line 1096, in join
2024-04-19 16:57:12 | ERROR | stderr |     self._wait_for_tstate_lock()
2024-04-19 16:57:12 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/threading.py", line 1116, in _wait_for_tstate_lock
2024-04-19 16:57:12 | ERROR | stderr |     if lock.acquire(block, timeout):
2024-04-19 16:57:12 | ERROR | stderr | KeyboardInterrupt
2024-04-19 16:59:14 | INFO | stdout | Running on local URL:  http://0.0.0.0:8888
2024-04-19 16:59:14 | INFO | stdout | 
2024-04-19 16:59:14 | INFO | stdout | To create a public link, set `share=True` in `launch()`.
2024-04-19 16:59:23 | INFO | stdout | Keyboard interruption in main thread... closing server.
2024-04-19 16:59:23 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 16:59:23 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 2058, in block_thread
2024-04-19 16:59:23 | ERROR | stderr |     time.sleep(0.1)
2024-04-19 16:59:23 | ERROR | stderr | KeyboardInterrupt
2024-04-19 16:59:23 | ERROR | stderr | 
2024-04-19 16:59:23 | ERROR | stderr | During handling of the above exception, another exception occurred:
2024-04-19 16:59:23 | ERROR | stderr | 
2024-04-19 16:59:23 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 16:59:23 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/app2.py", line 264, in <module>
2024-04-19 16:59:23 | ERROR | stderr |     api_open = api_open,
2024-04-19 16:59:23 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 1975, in launch
2024-04-19 16:59:23 | ERROR | stderr |     self.block_thread()
2024-04-19 16:59:23 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 2061, in block_thread
2024-04-19 16:59:23 | ERROR | stderr |     self.server.close()
2024-04-19 16:59:23 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/networking.py", line 43, in close
2024-04-19 16:59:23 | ERROR | stderr |     self.thread.join()
2024-04-19 16:59:23 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/threading.py", line 1096, in join
2024-04-19 16:59:23 | ERROR | stderr |     self._wait_for_tstate_lock()
2024-04-19 16:59:23 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/threading.py", line 1116, in _wait_for_tstate_lock
2024-04-19 16:59:23 | ERROR | stderr |     if lock.acquire(block, timeout):
2024-04-19 16:59:23 | ERROR | stderr | KeyboardInterrupt
2024-04-19 16:59:32 | INFO | stdout | Running on local URL:  http://0.0.0.0:8888
2024-04-19 16:59:32 | INFO | stdout | 
2024-04-19 16:59:32 | INFO | stdout | To create a public link, set `share=True` in `launch()`.
2024-04-19 16:59:55 | INFO | stdout | Keyboard interruption in main thread... closing server.
2024-04-19 16:59:55 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 16:59:55 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 2058, in block_thread
2024-04-19 16:59:55 | ERROR | stderr |     time.sleep(0.1)
2024-04-19 16:59:55 | ERROR | stderr | KeyboardInterrupt
2024-04-19 16:59:55 | ERROR | stderr | 
2024-04-19 16:59:55 | ERROR | stderr | During handling of the above exception, another exception occurred:
2024-04-19 16:59:55 | ERROR | stderr | 
2024-04-19 16:59:55 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 16:59:55 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/app2.py", line 263, in <module>
2024-04-19 16:59:55 | ERROR | stderr |     # exit()
2024-04-19 16:59:55 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 1975, in launch
2024-04-19 16:59:55 | ERROR | stderr |     self.block_thread()
2024-04-19 16:59:55 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 2061, in block_thread
2024-04-19 16:59:55 | ERROR | stderr |     self.server.close()
2024-04-19 16:59:55 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/networking.py", line 43, in close
2024-04-19 16:59:55 | ERROR | stderr |     self.thread.join()
2024-04-19 16:59:55 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/threading.py", line 1096, in join
2024-04-19 16:59:55 | ERROR | stderr |     self._wait_for_tstate_lock()
2024-04-19 16:59:55 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/threading.py", line 1116, in _wait_for_tstate_lock
2024-04-19 16:59:55 | ERROR | stderr |     if lock.acquire(block, timeout):
2024-04-19 16:59:55 | ERROR | stderr | KeyboardInterrupt
2024-04-19 17:00:04 | INFO | stdout | Running on local URL:  http://0.0.0.0:8888
2024-04-19 17:00:04 | INFO | stdout | 
2024-04-19 17:00:04 | INFO | stdout | To create a public link, set `share=True` in `launch()`.
2024-04-19 17:00:14 | INFO | stdout | {}
2024-04-19 17:00:52 | INFO | stdout | Keyboard interruption in main thread... closing server.
2024-04-19 17:00:52 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 17:00:52 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 2058, in block_thread
2024-04-19 17:00:52 | ERROR | stderr |     time.sleep(0.1)
2024-04-19 17:00:52 | ERROR | stderr | KeyboardInterrupt
2024-04-19 17:00:52 | ERROR | stderr | 
2024-04-19 17:00:52 | ERROR | stderr | During handling of the above exception, another exception occurred:
2024-04-19 17:00:52 | ERROR | stderr | 
2024-04-19 17:00:52 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 17:00:52 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/app2.py", line 266, in <module>
2024-04-19 17:00:52 | ERROR | stderr |     api_open = api_open,
2024-04-19 17:00:52 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 1975, in launch
2024-04-19 17:00:52 | ERROR | stderr |     self.block_thread()
2024-04-19 17:00:52 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 2061, in block_thread
2024-04-19 17:00:52 | ERROR | stderr |     self.server.close()
2024-04-19 17:00:52 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/networking.py", line 43, in close
2024-04-19 17:00:52 | ERROR | stderr |     self.thread.join()
2024-04-19 17:00:52 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/threading.py", line 1096, in join
2024-04-19 17:00:52 | ERROR | stderr |     self._wait_for_tstate_lock()
2024-04-19 17:00:52 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/threading.py", line 1116, in _wait_for_tstate_lock
2024-04-19 17:00:52 | ERROR | stderr |     if lock.acquire(block, timeout):
2024-04-19 17:00:52 | ERROR | stderr | KeyboardInterrupt
2024-04-19 17:00:59 | INFO | stdout | Running on local URL:  http://0.0.0.0:8888
2024-04-19 17:00:59 | INFO | stdout | 
2024-04-19 17:00:59 | INFO | stdout | To create a public link, set `share=True` in `launch()`.
2024-04-19 17:01:42 | INFO | stdout | Keyboard interruption in main thread... closing server.
2024-04-19 17:01:43 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 17:01:43 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 2058, in block_thread
2024-04-19 17:01:43 | ERROR | stderr |     time.sleep(0.1)
2024-04-19 17:01:43 | ERROR | stderr | KeyboardInterrupt
2024-04-19 17:01:43 | ERROR | stderr | 
2024-04-19 17:01:43 | ERROR | stderr | During handling of the above exception, another exception occurred:
2024-04-19 17:01:43 | ERROR | stderr | 
2024-04-19 17:01:43 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 17:01:43 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/app2.py", line 265, in <module>
2024-04-19 17:01:43 | ERROR | stderr |     demo.queue(
2024-04-19 17:01:43 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 1975, in launch
2024-04-19 17:01:43 | ERROR | stderr |     self.block_thread()
2024-04-19 17:01:43 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 2061, in block_thread
2024-04-19 17:01:43 | ERROR | stderr |     self.server.close()
2024-04-19 17:01:43 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/networking.py", line 43, in close
2024-04-19 17:01:43 | ERROR | stderr |     self.thread.join()
2024-04-19 17:01:43 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/threading.py", line 1096, in join
2024-04-19 17:01:43 | ERROR | stderr |     self._wait_for_tstate_lock()
2024-04-19 17:01:43 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/threading.py", line 1116, in _wait_for_tstate_lock
2024-04-19 17:01:43 | ERROR | stderr |     if lock.acquire(block, timeout):
2024-04-19 17:01:43 | ERROR | stderr | KeyboardInterrupt
2024-04-19 17:01:51 | INFO | stdout | Running on local URL:  http://0.0.0.0:8888
2024-04-19 17:01:51 | INFO | stdout | 
2024-04-19 17:01:51 | INFO | stdout | To create a public link, set `share=True` in `launch()`.
2024-04-19 17:03:08 | INFO | stdout | Keyboard interruption in main thread... closing server.
2024-04-19 17:03:08 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 17:03:08 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 2058, in block_thread
2024-04-19 17:03:08 | ERROR | stderr |     time.sleep(0.1)
2024-04-19 17:03:08 | ERROR | stderr | KeyboardInterrupt
2024-04-19 17:03:08 | ERROR | stderr | 
2024-04-19 17:03:08 | ERROR | stderr | During handling of the above exception, another exception occurred:
2024-04-19 17:03:08 | ERROR | stderr | 
2024-04-19 17:03:08 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 17:03:08 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/app2.py", line 265, in <module>
2024-04-19 17:03:08 | ERROR | stderr |     demo.queue(
2024-04-19 17:03:08 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 1975, in launch
2024-04-19 17:03:08 | ERROR | stderr |     self.block_thread()
2024-04-19 17:03:08 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 2061, in block_thread
2024-04-19 17:03:08 | ERROR | stderr |     self.server.close()
2024-04-19 17:03:08 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/networking.py", line 43, in close
2024-04-19 17:03:08 | ERROR | stderr |     self.thread.join()
2024-04-19 17:03:08 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/threading.py", line 1096, in join
2024-04-19 17:03:08 | ERROR | stderr |     self._wait_for_tstate_lock()
2024-04-19 17:03:08 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/threading.py", line 1116, in _wait_for_tstate_lock
2024-04-19 17:03:08 | ERROR | stderr |     if lock.acquire(block, timeout):
2024-04-19 17:03:08 | ERROR | stderr | KeyboardInterrupt
2024-04-19 17:03:15 | INFO | stdout | Running on local URL:  http://0.0.0.0:8888
2024-04-19 17:03:15 | INFO | stdout | 
2024-04-19 17:03:15 | INFO | stdout | To create a public link, set `share=True` in `launch()`.
2024-04-19 17:08:31 | INFO | stdout | Keyboard interruption in main thread... closing server.
2024-04-19 17:08:31 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 17:08:31 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 2058, in block_thread
2024-04-19 17:08:31 | ERROR | stderr |     time.sleep(0.1)
2024-04-19 17:08:31 | ERROR | stderr | KeyboardInterrupt
2024-04-19 17:08:31 | ERROR | stderr | 
2024-04-19 17:08:31 | ERROR | stderr | During handling of the above exception, another exception occurred:
2024-04-19 17:08:31 | ERROR | stderr | 
2024-04-19 17:08:31 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 17:08:31 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/app2.py", line 265, in <module>
2024-04-19 17:08:31 | ERROR | stderr |     demo.queue(
2024-04-19 17:08:31 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 1975, in launch
2024-04-19 17:08:31 | ERROR | stderr |     self.block_thread()
2024-04-19 17:08:31 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 2061, in block_thread
2024-04-19 17:08:31 | ERROR | stderr |     self.server.close()
2024-04-19 17:08:31 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/networking.py", line 43, in close
2024-04-19 17:08:31 | ERROR | stderr |     self.thread.join()
2024-04-19 17:08:31 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/threading.py", line 1096, in join
2024-04-19 17:08:31 | ERROR | stderr |     self._wait_for_tstate_lock()
2024-04-19 17:08:31 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/threading.py", line 1116, in _wait_for_tstate_lock
2024-04-19 17:08:31 | ERROR | stderr |     if lock.acquire(block, timeout):
2024-04-19 17:08:31 | ERROR | stderr | KeyboardInterrupt
2024-04-19 17:08:38 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 17:08:38 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/app2.py", line 264, in <module>
2024-04-19 17:08:38 | ERROR | stderr |     demo = build_demo()
2024-04-19 17:08:38 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/app2.py", line 238, in build_demo
2024-04-19 17:08:38 | ERROR | stderr |     demo.load(load_demo, [conversation_id], [state, model_selector,
2024-04-19 17:08:38 | ERROR | stderr | NameError: name 'conversation_id' is not defined
2024-04-19 17:08:55 | INFO | stdout | Running on local URL:  http://0.0.0.0:8888
2024-04-19 17:08:55 | INFO | stdout | 
2024-04-19 17:08:55 | INFO | stdout | To create a public link, set `share=True` in `launch()`.
2024-04-19 17:08:58 | INFO | stdout | {}
2024-04-19 17:13:37 | INFO | stdout | Keyboard interruption in main thread... closing server.
2024-04-19 17:13:37 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 17:13:37 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 2058, in block_thread
2024-04-19 17:13:37 | ERROR | stderr |     time.sleep(0.1)
2024-04-19 17:13:37 | ERROR | stderr | KeyboardInterrupt
2024-04-19 17:13:37 | ERROR | stderr | 
2024-04-19 17:13:37 | ERROR | stderr | During handling of the above exception, another exception occurred:
2024-04-19 17:13:37 | ERROR | stderr | 
2024-04-19 17:13:37 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 17:13:37 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/app2.py", line 265, in <module>
2024-04-19 17:13:37 | ERROR | stderr |     convers = [os.path.splitext(f)[0] for f in convers if f.endswith('.json')]
2024-04-19 17:13:37 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 1975, in launch
2024-04-19 17:13:37 | ERROR | stderr |     self.block_thread()
2024-04-19 17:13:37 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 2061, in block_thread
2024-04-19 17:13:37 | ERROR | stderr |     self.server.close()
2024-04-19 17:13:37 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/networking.py", line 43, in close
2024-04-19 17:13:37 | ERROR | stderr |     self.thread.join()
2024-04-19 17:13:37 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/threading.py", line 1096, in join
2024-04-19 17:13:37 | ERROR | stderr |     self._wait_for_tstate_lock()
2024-04-19 17:13:37 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/threading.py", line 1116, in _wait_for_tstate_lock
2024-04-19 17:13:37 | ERROR | stderr |     if lock.acquire(block, timeout):
2024-04-19 17:13:37 | ERROR | stderr | KeyboardInterrupt
2024-04-19 17:13:45 | INFO | stdout | Running on local URL:  http://0.0.0.0:8888
2024-04-19 17:13:45 | INFO | stdout | 
2024-04-19 17:13:45 | INFO | stdout | To create a public link, set `share=True` in `launch()`.
2024-04-19 17:13:48 | INFO | stdout | {}
2024-04-19 17:13:50 | INFO | stdout | a
2024-04-19 17:18:42 | INFO | stdout | Keyboard interruption in main thread... closing server.
2024-04-19 17:18:49 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 17:18:49 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/app2.py", line 271, in <module>
2024-04-19 17:18:49 | ERROR | stderr |     demo = build_demo()
2024-04-19 17:18:49 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/app2.py", line 228, in build_demo
2024-04-19 17:18:49 | ERROR | stderr |     textbox.submit(add_text, [state, textbox, imagebox, image_process_mode, with_debug_parameter_state], [state, chatbot, textbox, imagebox] + btn_list + [debug_btn]
2024-04-19 17:18:49 | ERROR | stderr | NameError: name 'btn_list' is not defined
2024-04-19 17:19:14 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 17:19:14 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/app2.py", line 271, in <module>
2024-04-19 17:19:14 | ERROR | stderr |     demo = build_demo()
2024-04-19 17:19:14 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/app2.py", line 229, in build_demo
2024-04-19 17:19:14 | ERROR | stderr |     ).then(http_bot, [state, model_selector, temperature, top_p, max_output_tokens, with_debug_parameter_state],
2024-04-19 17:19:14 | ERROR | stderr | NameError: name 'http_bot' is not defined
2024-04-19 17:20:45 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 17:20:45 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/app2.py", line 270, in <module>
2024-04-19 17:20:45 | ERROR | stderr |     demo = build_demo()
2024-04-19 17:20:45 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/app2.py", line 229, in build_demo
2024-04-19 17:20:45 | ERROR | stderr |     ).then(bot_execute, [state, model_selectorimage_process_mode], [state, chatbot] + btn_list + [debug_btn])
2024-04-19 17:20:45 | ERROR | stderr | NameError: name 'model_selectorimage_process_mode' is not defined
2024-04-19 17:21:06 | INFO | stdout | Running on local URL:  http://0.0.0.0:8888
2024-04-19 17:21:06 | INFO | stdout | 
2024-04-19 17:21:06 | INFO | stdout | To create a public link, set `share=True` in `launch()`.
2024-04-19 17:21:29 | INFO | stdout | {}
2024-04-19 17:21:38 | INFO | stdout | fwef
2024-04-19 17:21:38 | INFO | stdout | {'image': <PIL.Image.Image image mode=RGB size=392x500 at 0x7F93DF9D1810>, 'mask': <PIL.PngImagePlugin.PngImageFile image mode=RGBA size=392x500 at 0x7F93DF9D1C60>}
2024-04-19 17:21:38 | INFO | stdout | Crop
2024-04-19 17:21:38 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 17:21:38 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/routes.py", line 437, in run_predict
2024-04-19 17:21:38 | ERROR | stderr |     output = await app.get_blocks().process_api(
2024-04-19 17:21:38 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 1352, in process_api
2024-04-19 17:21:38 | ERROR | stderr |     result = await self.call_function(
2024-04-19 17:21:38 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 1077, in call_function
2024-04-19 17:21:38 | ERROR | stderr |     prediction = await anyio.to_thread.run_sync(
2024-04-19 17:21:38 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/anyio/to_thread.py", line 56, in run_sync
2024-04-19 17:21:38 | ERROR | stderr |     return await get_async_backend().run_sync_in_worker_thread(
2024-04-19 17:21:38 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 2144, in run_sync_in_worker_thread
2024-04-19 17:21:38 | ERROR | stderr |     return await future
2024-04-19 17:21:38 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 851, in run
2024-04-19 17:21:38 | ERROR | stderr |     result = context.run(func, *args)
2024-04-19 17:21:38 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 565, in add_text
2024-04-19 17:21:38 | ERROR | stderr |     exit()
2024-04-19 17:21:38 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/_sitebuiltins.py", line 26, in __call__
2024-04-19 17:21:38 | ERROR | stderr |     raise SystemExit(code)
2024-04-19 17:21:38 | ERROR | stderr | SystemExit: None
2024-04-19 17:21:38 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 17:21:38 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/routes.py", line 437, in run_predict
2024-04-19 17:21:38 | ERROR | stderr |     output = await app.get_blocks().process_api(
2024-04-19 17:21:38 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 1352, in process_api
2024-04-19 17:21:38 | ERROR | stderr |     result = await self.call_function(
2024-04-19 17:21:38 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 1077, in call_function
2024-04-19 17:21:38 | ERROR | stderr |     prediction = await anyio.to_thread.run_sync(
2024-04-19 17:21:38 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/anyio/to_thread.py", line 56, in run_sync
2024-04-19 17:21:38 | ERROR | stderr |     return await get_async_backend().run_sync_in_worker_thread(
2024-04-19 17:21:38 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 2144, in run_sync_in_worker_thread
2024-04-19 17:21:38 | ERROR | stderr |     return await future
2024-04-19 17:21:38 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 851, in run
2024-04-19 17:21:38 | ERROR | stderr |     result = context.run(func, *args)
2024-04-19 17:21:38 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 542, in bot_execute
2024-04-19 17:21:38 | ERROR | stderr |     default_conversation.images.append([path_image])
2024-04-19 17:21:38 | ERROR | stderr | NameError: name 'default_conversation' is not defined
2024-04-19 17:26:38 | INFO | stdout | Keyboard interruption in main thread... closing server.
2024-04-19 17:26:39 | ERROR | stderr | Error in sys.excepthook:
2024-04-19 17:26:39 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 17:26:39 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/linecache.py", line 46, in getlines
2024-04-19 17:26:39 | ERROR | stderr |     return updatecache(filename, module_globals)
2024-04-19 17:26:39 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/linecache.py", line 136, in updatecache
2024-04-19 17:26:39 | ERROR | stderr |     with tokenize.open(fullname) as fp:
2024-04-19 17:26:39 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/tokenize.py", line 396, in open
2024-04-19 17:26:39 | ERROR | stderr |     encoding, lines = detect_encoding(buffer.readline)
2024-04-19 17:26:39 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/tokenize.py", line 365, in detect_encoding
2024-04-19 17:26:39 | ERROR | stderr |     first = read_or_stop()
2024-04-19 17:26:39 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/tokenize.py", line 323, in read_or_stop
2024-04-19 17:26:39 | ERROR | stderr |     return readline()
2024-04-19 17:26:39 | ERROR | stderr | KeyboardInterrupt
2024-04-19 17:26:39 | ERROR | stderr | 
2024-04-19 17:26:39 | ERROR | stderr | Original exception was:
2024-04-19 17:26:39 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 17:26:39 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 2058, in block_thread
2024-04-19 17:26:39 | ERROR | stderr |     time.sleep(0.1)
2024-04-19 17:26:39 | ERROR | stderr | KeyboardInterrupt
2024-04-19 17:26:39 | ERROR | stderr | 
2024-04-19 17:26:39 | ERROR | stderr | During handling of the above exception, another exception occurred:
2024-04-19 17:26:39 | ERROR | stderr | 
2024-04-19 17:26:39 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 17:26:39 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/app2.py", line 271, in <module>
2024-04-19 17:26:39 | ERROR | stderr |     max_size = max_size
2024-04-19 17:26:39 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 1975, in launch
2024-04-19 17:26:39 | ERROR | stderr |     self.block_thread()
2024-04-19 17:26:39 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 2061, in block_thread
2024-04-19 17:26:39 | ERROR | stderr |     self.server.close()
2024-04-19 17:26:39 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/networking.py", line 43, in close
2024-04-19 17:26:39 | ERROR | stderr |     self.thread.join()
2024-04-19 17:26:39 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/threading.py", line 1096, in join
2024-04-19 17:26:39 | ERROR | stderr |     self._wait_for_tstate_lock()
2024-04-19 17:26:39 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/threading.py", line 1116, in _wait_for_tstate_lock
2024-04-19 17:26:39 | ERROR | stderr |     if lock.acquire(block, timeout):
2024-04-19 17:26:39 | ERROR | stderr | KeyboardInterrupt
2024-04-19 17:27:28 | INFO | stdout | Running on local URL:  http://0.0.0.0:8888
2024-04-19 17:27:28 | INFO | stdout | 
2024-04-19 17:27:28 | INFO | stdout | To create a public link, set `share=True` in `launch()`.
2024-04-19 17:27:34 | INFO | stdout | {}
2024-04-19 17:27:39 | INFO | stdout | scsac
2024-04-19 17:27:39 | INFO | stdout | {'image': <PIL.Image.Image image mode=RGB size=392x500 at 0x7F603FF59840>, 'mask': <PIL.PngImagePlugin.PngImageFile image mode=RGBA size=392x500 at 0x7F603FF587C0>}
2024-04-19 17:27:39 | INFO | stdout | Crop
2024-04-19 17:27:39 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 17:27:39 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/routes.py", line 437, in run_predict
2024-04-19 17:27:39 | ERROR | stderr |     output = await app.get_blocks().process_api(
2024-04-19 17:27:39 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 1352, in process_api
2024-04-19 17:27:39 | ERROR | stderr |     result = await self.call_function(
2024-04-19 17:27:39 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 1077, in call_function
2024-04-19 17:27:39 | ERROR | stderr |     prediction = await anyio.to_thread.run_sync(
2024-04-19 17:27:39 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/anyio/to_thread.py", line 56, in run_sync
2024-04-19 17:27:39 | ERROR | stderr |     return await get_async_backend().run_sync_in_worker_thread(
2024-04-19 17:27:39 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 2144, in run_sync_in_worker_thread
2024-04-19 17:27:39 | ERROR | stderr |     return await future
2024-04-19 17:27:39 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 851, in run
2024-04-19 17:27:39 | ERROR | stderr |     result = context.run(func, *args)
2024-04-19 17:27:39 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 565, in add_text
2024-04-19 17:27:39 | ERROR | stderr |     exit()
2024-04-19 17:27:39 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/_sitebuiltins.py", line 26, in __call__
2024-04-19 17:27:39 | ERROR | stderr |     raise SystemExit(code)
2024-04-19 17:27:39 | ERROR | stderr | SystemExit: None
2024-04-19 17:27:40 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The class `langchain_community.llms.huggingface_hub.HuggingFaceHub` was deprecated in langchain-community 0.0.21 and will be removed in 0.2.0. Use HuggingFaceEndpoint instead.
2024-04-19 17:27:40 | ERROR | stderr |   warn_deprecated(
2024-04-19 17:27:40 | ERROR | stderr | /home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The function `run` was deprecated in LangChain 0.1.0 and will be removed in 0.2.0. Use invoke instead.
2024-04-19 17:27:40 | ERROR | stderr |   warn_deprecated(
2024-04-19 17:27:44 | INFO | stdout | ["Identify the person in this image by 'identify_person_'"]
2024-04-19 17:27:47 | INFO | stdout | [{'task': "Identify the person in this image by 'identify_person_'", 'id': 1, 'dep': [-1]}]
2024-04-19 17:27:47 | INFO | stdout | {'Original Question': 'identify the person in this image', 1: {'task': "Identify the person in this image by 'identify_person_'", 'answer': ''}}
2024-04-19 17:27:47 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 17:27:47 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/routes.py", line 437, in run_predict
2024-04-19 17:27:47 | ERROR | stderr |     output = await app.get_blocks().process_api(
2024-04-19 17:27:47 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 1352, in process_api
2024-04-19 17:27:47 | ERROR | stderr |     result = await self.call_function(
2024-04-19 17:27:47 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 1077, in call_function
2024-04-19 17:27:47 | ERROR | stderr |     prediction = await anyio.to_thread.run_sync(
2024-04-19 17:27:47 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/anyio/to_thread.py", line 56, in run_sync
2024-04-19 17:27:47 | ERROR | stderr |     return await get_async_backend().run_sync_in_worker_thread(
2024-04-19 17:27:47 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 2144, in run_sync_in_worker_thread
2024-04-19 17:27:47 | ERROR | stderr |     return await future
2024-04-19 17:27:47 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 851, in run
2024-04-19 17:27:47 | ERROR | stderr |     result = context.run(func, *args)
2024-04-19 17:27:47 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 543, in bot_execute
2024-04-19 17:27:47 | ERROR | stderr |     agent.task_execution(state)
2024-04-19 17:27:47 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/llava_module/agents_worker.py", line 508, in task_execution
2024-04-19 17:27:47 | ERROR | stderr |     tool_id, api_result, call_result, tool_instruction, API_instruction = self.retrieval(task, Tool_dic,
2024-04-19 17:27:47 | ERROR | stderr | NameError: name 'Tool_dic' is not defined
2024-04-19 17:29:19 | INFO | stdout | Keyboard interruption in main thread... closing server.
2024-04-19 17:29:19 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 17:29:19 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 2058, in block_thread
2024-04-19 17:29:19 | ERROR | stderr |     time.sleep(0.1)
2024-04-19 17:29:19 | ERROR | stderr | KeyboardInterrupt
2024-04-19 17:29:19 | ERROR | stderr | 
2024-04-19 17:29:19 | ERROR | stderr | During handling of the above exception, another exception occurred:
2024-04-19 17:29:19 | ERROR | stderr | 
2024-04-19 17:29:19 | ERROR | stderr | Traceback (most recent call last):
2024-04-19 17:29:19 | ERROR | stderr |   File "/mnt/548E15328E150DDC/home2/AI_github/GitHub/Almighty_Bot/src/app2.py", line 269, in <module>
2024-04-19 17:29:19 | ERROR | stderr |     demo.queue(
2024-04-19 17:29:19 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 1975, in launch
2024-04-19 17:29:19 | ERROR | stderr |     self.block_thread()
2024-04-19 17:29:19 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/blocks.py", line 2061, in block_thread
2024-04-19 17:29:19 | ERROR | stderr |     self.server.close()
2024-04-19 17:29:19 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/site-packages/gradio/networking.py", line 43, in close
2024-04-19 17:29:19 | ERROR | stderr |     self.thread.join()
2024-04-19 17:29:19 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/threading.py", line 1096, in join
2024-04-19 17:29:19 | ERROR | stderr |     self._wait_for_tstate_lock()
2024-04-19 17:29:19 | ERROR | stderr |   File "/home/son/anaconda3/envs/son_llm/lib/python3.10/threading.py", line 1116, in _wait_for_tstate_lock
2024-04-19 17:29:19 | ERROR | stderr |     if lock.acquire(block, timeout):
2024-04-19 17:29:19 | ERROR | stderr | KeyboardInterrupt
